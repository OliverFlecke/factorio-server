name: Build and publish image

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

env:
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: factorio-server

jobs:
  build-and-publish-image:
    name: Build and publish image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64]

    steps:
      - name: Set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Set GHCR token
        id: set-ghcr-token
        run: echo "GHCR_TOKEN=$(echo -n ${{ secrets.GITHUB_TOKEN }} | base64 )" >> $GITHUB_OUTPUT

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install requests

      - uses: actions/checkout@v3
      - name: Get Factorio version
        id: get-version
        run: echo "VERSION=$(python extract.py)" >> $GITHUB_OUTPUT
        env:
          GHCR_TOKEN: ${{ steps.set-ghcr-token.outputs.GHCR_TOKEN }}

      - uses: docker/setup-buildx-action@v1

      - name: Login to container registry
        uses: docker/login-action@v2
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.CONTAINER_REGISTRY }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        with:
          images: |
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.get-version.outputs.VERSION }}

      - name: Build image
        id: build-image
        uses: docker/build-push-action@v4
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        with:
          platforms: linux/${{ matrix.platform }}
          push: true
          cache-from: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform }}
          cache-to: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform }},mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          VERSION: ${{ steps.get-version.outputs.VERSION }}
