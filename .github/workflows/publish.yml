name: Build and publish image

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build-and-publish-image:
    name: Build and publish image
    runs-on: ubuntu-latest
    steps:
      - name: Set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Set GHCR token
        id: set-ghcr-token
        run: echo "GHCR_TOKEN=$(echo -n ${{ secrets.GITHUB_TOKEN }} | base64 )" >> $GITHUB_OUTPUT

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install requests

      - uses: actions/checkout@v3
      - name: Get Factorio version
        id: get-version
        run: echo "VERSION=$(python extract.py)" >> $GITHUB_OUTPUT
        env:
          GHCR_TOKEN: ${{ steps.set-ghcr-token.outputs.GHCR_TOKEN }}

      - name: Login to container registry
        uses: redhat-actions/podman-login@v1
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.CONTAINER_REGISTRY }}/${{ env.OWNER_LC }}

      - name: Build image
        id: build-image
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        uses: redhat-actions/buildah-build@v2
        with:
          image: factorio-server
          tags: latest ${{ github.sha }} ${{ env.VERSION }}
          platforms: linux/amd64
          containerfiles: Dockerfile
          layers: true
        env:
          VERSION: ${{ steps.get-version.outputs.VERSION }}

      - name: Push image
        id: push-image
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}/${{ env.OWNER_LC }}
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}

      - name: Print image url
        if: ${{ steps.get-version.outputs.VERSION != '' }}
        run: echo "Image pushed to ${{ steps.push-image.outputs.registry-paths }}"
